/**
 * The copyrights, all other intellectual and industrial 
 * property rights are retained by XMOS and/or its licensors. 
 * Terms and conditions covering the use of this code can
 * be found in the Xmos End User License Agreement.
 *
 * Copyright XMOS Ltd 2013
 *
 * In the case where this code is a modification of existing code
 * under a separate license, the separate license terms are shown
 * below. The modifications to the code are still covered by the 
 * copyright notice above.
 **/                                   

#ifndef _TEST_ADC_COMMON_H_
#define _TEST_ADC_COMMON_H_

#include <xs1.h>
#include <assert.h>
#include <print.h>
#include <safestring.h>

#include "use_locks.h"

// Define H/W ADC chip in use
#define HW_ADC_7265 1

#if (1 == HW_ADC_7265)
#include "adc_7265.h"
#endif // (1 == HW_ADC_7265)

/** Define string size */
#define STR_LEN 256

/** Define Numeber of bits to represent gain */
#define GAIN_BITS 8 

/** Define value for Maximum Gain test*/
#define MAX_GAIN ((1 << 8) - 1) // 255 Maximum Gain

/** Define value for Minimum Gain test*/
#define MIN_GAIN 1

/** Define value for Fast speed test*/
#define HI_SPEED MAX_SPEC_RPM // Fast Speed

/** Define value for Slow speed test*/
#define LO_SPEED 100 // Slow Speed

/** Define time period between ADC Client requests for data */
#define ADC_PERIOD (40 * MICRO_SEC) // Time period between ADC Client requests for data

/** Type for Port timer values */
typedef unsigned short PORT_TIME_TYP;

/** Enumeration of ADC Test Options */
typedef enum ADC_TEST_ETAG
{
  TST_SUM = 0,	// Zero-Sum Tests
  TST_SMALL,		// Small-Gain tests (Also tests Non-Paced, Fast-Speed, and Clockwise)
  TST_PACE,			// Paced ADC sampling tests (Also tests Large-Gain, Fast-Speed, and Anti-Clockwise) 
  TST_SLOW,			// Slow speed Tests (Also tests Non-Paced, Large-Gain, and Clockwise)
  NUM_TEST_OPTS	// Handy Value!-)
} ADC_TEST_ENUM;

/** Enumeration of ADC Test Vector Components */
typedef enum VECT_COMP_ETAG
{
  CNTRL = 0,	// Special Case: Control/Comunications state
  SUM,				// Sum-state
  SPIN,				// Spin-state
  GAIN,				// Amplitude-state
  SPEED,			// Speed-state
  NUM_VECT_COMPS	// Handy Value!-)
} VECT_COMP_ENUM;

typedef enum SUM_ADC_ETAG
{
  NO_SUM = 0,		// No Zero-Sum test
  SUM_ON,				// Do Zero-Sum test
  NUM_ADC_SUMS	// Handy Value!-)
} SUM_ADC_ENUM;

/** Enumeration of ADC Spin states */
typedef enum SPIN_ADC_ETAG
{
  ANTI = 0,				// Anti-clockwise
  CLOCK,				// Clock-wise
  NUM_ADC_SPINS	// Handy Value!-)
} SPIN_ADC_ENUM;

/** Enumeration of ADC Amplitude-states */
typedef enum GAIN_ADC_ETAG
{
  SMALL = 0,		// Small Amplitude
  LARGE,		// Large Amplitude
  NUM_ADC_GAINS	// Handy Value!-)
} GAIN_ADC_ENUM;

/** Enumeration of ADC Speed-states */
typedef enum SPEED_ADC_ETAG
{
  SLOW = 0,	// Slow Speed
  FAST, 		// Fast Speed
  NUM_ADC_SPEEDS	// Handy Value!-)
} SPEED_ADC_ENUM;

/* ADC values are normally generated about every 40usecs, or 4000 Cylces 
 * (at the default Reference Frequency of 100 MHz). This is referred to as the pacing period.
 * This is a long time to wait on a simulator!-(
 * Therefore Pacing can be switched off to speed up the simulation. 
 * In which case ADC values are produced as fast as possible.
 * Irrespective of if Pacing in on or off, the ADC values and time-stamps should be roughly the same.
 * The difference is the mechanism used to generate the time-stamp.
 * If Pacing is ON, the time-stamp is generated by the simulator clock.
 * With  NO Pacing, the time-stamp is a 'global' variable which is incremented by the 'pacing period.
 */
/** Enumeration of ADC Control-states */
typedef enum CNTRL_ADC_ETAG
{
	QUIT = 0,	// Quit testing (for current motor)
  NO_PACE,	// Pace ADC sampling to PACE_PERIOD
  PACE_ON,	// Pacing Off, (runs as fast as possible)
  NUM_ADC_CNTRLS	// Handy Value!-)
} CNTRL_ADC_ENUM;

/** Define maximum number of states for any test vector component (used to size arrays) */
#define MAX_COMP_STATES NUM_ADC_CNTRLS	// Edit this line

/** Different Test Commands */
typedef enum CMD_TST_ETAG
{
  END_TST_CMD = 0,	// Signal end-of-current test
  TST_REQ_CMD,			// Request new test value
  TST_ACK_CMD,			// Acknowledge test value Received
  NUM_TST_CMDS			// Handy Value!-)
} CMD_TST_ENUM;

/** Type containing string */
typedef struct STRING_TAG // Structure containing string array
{
	char str[STR_LEN]; // String array (NB Structure allows easy string copy)
} STRING_TYP;

/** Type containing Test Vector */
typedef struct TEST_VECT_TAG // Structure containing test vector (ADC conditions to be tested)
{
	int comp_state[NUM_VECT_COMPS]; // array containing current states for each test vector component 
} TEST_VECT_TYP;

/** Type containing Meta-information for one Test Vector */
typedef struct VECT_COMP_TAG // Structure containing common ADC test data for one test vector component
{
	STRING_TYP state_names[MAX_COMP_STATES]; // Array of names for each state of this test vector component 
	STRING_TYP comp_name; // name for this test vector component
	int num_states; // number of states for this test vector component
} VECT_COMP_TYP;

/** Type containing all Test Options */
typedef struct TEST_OPTS_TAG // Structure containing all test option data
{
	int flags[NUM_TEST_OPTS]; // Array of test option flags
} TEST_OPTS_TYP;

/** Type containing all Test Vector Meta-information */
typedef struct COMMON_ADC_TAG // Structure containing all common ADC test data
{
	VECT_COMP_TYP comp_data[NUM_VECT_COMPS]; // Array of data for each component of test vector
	TEST_OPTS_TYP options; // Structure of test_option data
} COMMON_ADC_TYP;

/*****************************************************************************/
/** Initialise common ADC Test data
 * \param comm_adc_s, // Reference to structure of common ADC data
 */
void init_common_data( // Initialise common ADC Test data
	COMMON_ADC_TYP &comm_adc_s // Reference to structure of common ADC data
);
/*****************************************************************************/
/** Print test vector details
 * \param comm_adc_s, // Reference to structure of common ADC data
 * \param inp_vect, // Structure containing current ADC test vector to be printed
 * \param prefix_str[] // Prefix string
 */
void print_test_vector( // Print test vector details
	COMMON_ADC_TYP &comm_adc_s, // Reference to structure of common ADC data
	TEST_VECT_TYP inp_vect, // Structure containing current ADC test vector to be printed
	const char prefix_str[] // prefix string
);
/*****************************************************************************/
#endif /* _TEST_ADC_COMMON_H_ */
